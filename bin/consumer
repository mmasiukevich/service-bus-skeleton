#!/usr/bin/env php
<?php

declare(strict_types = 1);

use Amp\Loop;
use ServiceBus\Application\ServiceBusKernel;
use ServiceBus\Transport\Amqp\AmqpExchange;
use ServiceBus\Transport\Amqp\AmqpQueue;
use ServiceBus\Transport\Common\QueueBind;
use ServiceBus\Transport\Module\PhpInnacleTransportModule;
use ServiceBus\Application\DependencyInjection\Compiler\Logger\StdOutLoggerCompilerPass;
use ServiceBus\Application\Bootstrap;
use ServiceBus\Storage\Module\SqlStorageModule;
use ServiceBus\Sagas\Module\SagaModule;
use ServiceBus\Storage\Common\DatabaseAdapter;
use ServiceBus\Scheduler\Module\SchedulerModule;
use ServiceBus\Transport\Common\TopicBind;
use ServiceBus\Transport\Amqp\AmqpTransportLevelDestination;
use ServiceBus\Scheduler\Contract\EmitSchedulerOperation;
use ServiceBus\EventSourcing\Module\EventSourcingModule;
use ServiceBus\Application\DependencyInjection\Compiler\Retry\SimpleRetryCompilerPass;

/** Use https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh instead sleep() function for RabbitMQ */
\sleep(8);

include __DIR__ . '/../vendor/autoload.php';

$bootstrap = Bootstrap::withDotEnv(rootDirectoryPath: __DIR__ . '/..', envFilePath: __DIR__ . '/../.env')
    ->addExtensions(extensions: new \AppExtension())
    ->useCustomCacheDirectory(cacheDirectoryPath: __DIR__ . '/../cache')
    ->enableAutoImportMessageHandlers(directories: [__DIR__ . '/../src'], excludedFiles: []);

$bootstrap->addCompilerPasses(
    new StdOutLoggerCompilerPass(),
    new SimpleRetryCompilerPass(maxRetryCount: 10, retryDelay: 1)
);

$bootstrap->applyModules(
    SqlStorageModule::postgreSQL(connectionDSN: (string) \getenv('DATABASE_CONNECTION_DSN')),
    SagaModule::withSqlStorage(databaseAdapterServiceId: DatabaseAdapter::class)->enableAutoImportSagas(
        directories: [__DIR__ . '/../src'],
        excludedFiles: []
    ),
    EventSourcingModule::withSqlStorage(databaseAdapterServiceId: DatabaseAdapter::class),
    SchedulerModule::rabbitMqWithSqlStorage(databaseAdapterServiceId: DatabaseAdapter::class),
    new PhpInnacleTransportModule(
        connectionDSN: (string) \getenv('TRANSPORT_CONNECTION_DSN'),
        defaultDestinationExchange: (string) \getenv('SENDER_DESTINATION_TOPIC'),
        defaultDestinationRoutingKey: (string) \getenv('SENDER_DESTINATION_TOPIC_ROUTING_KEY')
    )
);

/** @noinspection PhpUnhandledExceptionInspection */
$container = $bootstrap->boot();

Loop::run(
    static function() use ($container): \Generator
    {
        try
        {
            $mainExchange = AmqpExchange::direct((string) \getenv('TRANSPORT_TOPIC'))->makeDurable();
            $mainQueue    = AmqpQueue::default((string) \getenv('TRANSPORT_QUEUE'))->makeDurable();

            $kernel = (new ServiceBusKernel($container))
                ->useDefaultStopSignalHandler(stopDelay: 3);

            yield $kernel->createQueue(
                queue: $mainQueue,
                binds: new QueueBind(
                    destinationTopic: $mainExchange,
                    routingKey: (string) \getenv('TRANSPORT_ROUTING_KEY')
                )
            );

            /** Scheduler exchange */
            yield $kernel->createTopic(
                topic: AmqpExchange::delayed((string) \getenv('SCHEDULER_TOPIC')),
                binds: new TopicBind(
                    destinationTopic: $mainExchange,
                    routingKey: (string) \getenv('TRANSPORT_ROUTING_KEY')
                )
            );

            /** Add custom message route for scheduled operations */
            $kernel->registerDestinationForMessages(
                new AmqpTransportLevelDestination(
                    (string) \getenv('SCHEDULER_TOPIC'),
                    (string) \getenv('TRANSPORT_ROUTING_KEY')
                ),
                EmitSchedulerOperation::class
            );

            yield $kernel->run($mainQueue);
        }
        catch(\Throwable $throwable)
        {
            echo $throwable->getMessage(), \PHP_EOL;
            exit;
        }
    }
);